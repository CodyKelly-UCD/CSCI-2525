Microsoft (R) Macro Assembler Version 14.00.24210.0	    04/06/18 22:49:35
	: HW6.as					     Page 1 - 1


				TITLE: HW6.asm

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = mov eax, 0			ClearEAX textequ <mov eax, 0>
 = mov ebx, 0			ClearEBX textequ <mov ebx, 0>
 = mov ecx, 0			ClearECX textequ <mov ecx, 0>
 = mov edx, 0			ClearEDX textequ <mov edx, 0>
 = mov esi, 0			ClearESI textequ <mov esi, 0>
 = mov edi, 0			ClearEDI textequ <mov edi, 0>
 = 00000033			maxLength = 51d

 00000000			.data
 00000000  00000033 [		phrase BYTE maxLength DUP(0)
	    00
	   ]
 00000033 00			phraseLength BYTE 0
 00000034 00			phraseSet BYTE 0
 00000035 50 6C 65 61 73	phrasePrompt byte 'Please enter a phrase (50 characters or less): ',0
	   65 20 65 6E 74
	   65 72 20 61 20
	   70 68 72 61 73
	   65 20 28 35 30
	   20 63 68 61 72
	   61 63 74 65 72
	   73 20 6F 72 20
	   6C 65 73 73 29
	   3A 20 00

 00000065  00000033 [		key BYTE maxLength DUP(0)
	    00
	   ]
 00000098 00			keyLength BYTE 0
 00000099 00			keySet BYTE 0
 0000009A 50 6C 65 61 73	keyPrompt byte 'Please enter a key (50 characters or less): ',0
	   65 20 65 6E 74
	   65 72 20 61 20
	   6B 65 79 20 28
	   35 30 20 63 68
	   61 72 61 63 74
	   65 72 73 20 6F
	   72 20 6C 65 73
	   73 29 3A 20 00

 000000C7 59 6F 75 20 68	errorMessage byte 'You have entered an invalid option. Please try again.', 0Ah, 0Dh, 0h
	   61 76 65 20 65
	   6E 74 65 72 65
	   64 20 61 6E 20
	   69 6E 76 61 6C
	   69 64 20 6F 70
	   74 69 6F 6E 2E
	   20 50 6C 65 61
	   73 65 20 74 72
	   79 20 61 67 61
	   69 6E 2E 0A 0D
	   00
 000000FF 50 6C 65 61 73	invalidMessage byte 'Please enter both a key and a phrase before attempting to encrypt/decrypt.', 0ah, 0dh, 0
	   65 20 65 6E 74
	   65 72 20 62 6F
	   74 68 20 61 20
	   6B 65 79 20 61
	   6E 64 20 61 20
	   70 68 72 61 73
	   65 20 62 65 66
	   6F 72 65 20 61
	   74 74 65 6D 70
	   74 69 6E 67 20
	   74 6F 20 65 6E
	   63 72 79 70 74
	   2F 64 65 63 72
	   79 70 74 2E 0A
	   0D 00

 0000014C 00			userChoice byte 0

 00000000			.code
 00000000			main PROC
 00000000  E8 00000252		call ClearRegisters

 00000005			startHere:
 00000005  BA 00000000 R	mov edx, offset phrase
 0000000A  A0 00000034 R	mov al, phraseSet
 0000000F  E8 00000262		call DisplayMainMenu
 00000014  E8 00000000 E	call ReadHex
 00000019  A2 0000014C R	mov userChoice, al

 0000001E			opt1:
				; Get a phrase from the user, then format it
 0000001E  80 3D 0000014C R	cmp userChoice, 1
	   01
 00000025  75 2C		jne opt2
 00000027  E8 00000000 E	call clrscr
 0000002C  BA 00000000 R	mov edx, offset phrase
 00000031  B8 00000035 R	mov eax, offset phrasePrompt
 00000036  BB 00000033 R	mov ebx, offset phraseLength
 0000003B  E8 000001D3		call EnterString
 00000040  E8 000000FB		call ChangeCase
 00000045  E8 00000194		call LettersOnly
 0000004A  C6 05 00000034 R	mov phraseSet, 1
	   01
 00000051  EB B2		jmp starthere

 00000053			opt2:
				; Get a key from the user
 00000053  80 3D 0000014C R	cmp userChoice, 2
	   02
 0000005A  75 22		jne opt3
 0000005C  E8 00000000 E	call clrscr
 00000061  BA 00000065 R	mov edx, offset key
 00000066  B8 0000009A R	mov eax, offset keyPrompt
 0000006B  BB 00000098 R	mov ebx, offset keyLength
 00000070  E8 0000019E		call EnterString
 00000075  C6 05 00000099 R	mov keySet, 1
	   01
 0000007C  EB 87		jmp startHere

 0000007E			opt3:
				; Encrypt phrase
 0000007E  80 3D 0000014C R	cmp userChoice, 3
	   03
 00000085  75 3D		jne opt4

				; If either the phrase or key has not been set, this option is invalid
 00000087  80 3D 00000034 R	cmp phraseSet, 0
	   00
 0000008E  0F 84 0000008F	je invalid
 00000094  80 3D 00000099 R	cmp keySet, 0
	   00
 0000009B  0F 84 00000082	je invalid
 000000A1  BA 00000000 R	mov edx, offset phrase
 000000A6  B8 00000065 R	mov eax, offset key
 000000AB  0F B6 0D		movzx ecx, [phraseLength]
	   00000033 R
 000000B2  8A 1D 00000098 R	mov bl, [keyLength]
 000000B8  B7 01		mov bh, 1
 000000BA  E8 000000A3		call EncryptDecrypt
 000000BF  E9 FFFFFF41		jmp startHere

 000000C4			opt4:
				; Decrypt phrase
 000000C4  80 3D 0000014C R	cmp userChoice, 4
	   04
 000000CB  75 35		jne opt5

				; If either the phrase or key has not been set, this option is invalid
 000000CD  80 3D 00000034 R	cmp phraseSet, 0
	   00
 000000D4  74 4D		je invalid
 000000D6  80 3D 00000099 R	cmp keySet, 0
	   00
 000000DD  74 44		je invalid
 000000DF  BA 00000000 R	mov edx, offset phrase
 000000E4  B8 00000065 R	mov eax, offset key
 000000E9  0F B6 0D		movzx ecx, [phraseLength]
	   00000033 R
 000000F0  8A 1D 00000098 R	mov bl, [keyLength]
 000000F6  B7 00		mov bh, 0
 000000F8  E8 00000065		call EncryptDecrypt
 000000FD  E9 FFFFFF03		jmp startHere

 00000102			opt5:
 00000102  80 3D 0000014C R	cmp userChoice, 5
	   05
 00000109  75 02		jne oops
 0000010B  EB 2C		jmp quit

 0000010D			oops:
 0000010D  52			push edx
 0000010E  BA 000000C7 R	mov edx, offset errormessage
 00000113  E8 00000000 E	call writestring
 00000118  E8 00000000 E	call waitmsg
 0000011D  5A			pop edx
 0000011E  E9 FFFFFEE2		jmp starthere

 00000123			invalid:
 00000123  52			push edx
 00000124  BA 000000FF R	mov edx, offset invalidmessage
 00000129  E8 00000000 E	call writestring
 0000012E  E8 00000000 E	call waitmsg
 00000133  5A			pop edx
 00000134  E9 FFFFFECC		jmp starthere

 00000139			quit:
				exit
 00000139  6A 00	   *	    push   +000000000h
 0000013B  E8 00000000 E   *	    call   ExitProcess
 00000140			main ENDP

 00000140			ChangeCase proc
				; Description:  Converts all lowercase letters in string to uppercase
				;
				; Receives:
				; EDX: Offset of string array
				; EBX: Length of string array
				;
				; Returns:  
				; EDX: String array with converted letters, if any
 00000140  56			push esi
 00000141  50			push eax
 00000142  51			push ecx
 00000143  BE 00000000		clearESI
 00000148  0F B6 0B		movzx ecx, byte ptr [ebx]

 0000014B			letterLoop:
 0000014B  8A 04 16		mov al, byte ptr [edx+esi]
 0000014E  3C 61		cmp al, 'a'
 00000150  72 09		jb keepgoing
 00000152  3C 7A		cmp al, 'z'
 00000154  77 05		ja keepgoing
 00000156  2C 20		sub al, 20h
 00000158  88 04 16		mov byte ptr [edx+esi], al
 0000015B			keepgoing:
 0000015B  46			inc esi
 0000015C  E2 ED		loop letterLoop

 0000015E  59			pop ecx
 0000015F  58			pop eax
 00000160  5E			pop esi
 00000161  C3			ret
 00000162			ChangeCase endp

 00000162			EncryptDecrypt proc
				; Description:
				; Shifts characters in a phrase an amount specified in a key
				; Or alerts the user if no key is set.
				;
				; Receives:
				; EDX: Offset of phrase to shift
				; EAX: Offset of key to use
				; ECX: Length of phrase
				; BL: Length of key
				; BH: 1 if Encyrpting, 0 if decrypting
				;
				; Returns:
				; EDX: Encrypted phrase
 0000014D			.data
 0000014D 00			theKeyLength byte 0
 0000014E 00			keyIndex byte 0
 0000014F 00			phraseIndex byte 0
 00000150 00			currentLetter byte 0
 00000151 00			encrypt byte 0
 00000162			.code
 00000162  C6 05 0000014E R	mov keyIndex, 0
	   00
 00000169  C6 05 0000014F R	mov phraseIndex, 0
	   00
 00000170  56			push esi
 00000171  88 1D 0000014D R	mov theKeyLength, bl
 00000177  FE 0D 0000014D R	dec theKeyLength
 0000017D  88 3D 00000151 R	mov encrypt, bh
 00000183  BB 00000000		mov ebx, 0

 00000188			eLoop:
				; Get the current key letter
 00000188  0F B6 35		movzx esi, [keyIndex]
	   0000014E R
 0000018F  8A 1C 06		mov bl, [eax+esi]
 00000192  50			push eax
				; Store key letter
 00000193  8A C3		mov al, bl
				; Get key letter modulo 26d
 00000195  B4 1A		mov ah, 26
 00000197  E8 00000133		call Modulo
				; Shift current phrase letter by modulus result
 0000019C  0F B6 35		movzx esi, [phraseIndex]
	   0000014F R
 000001A3  8A 04 16		mov al, [edx + esi]
				; Check to see if we're encrypting
 000001A6  80 3D 00000151 R	cmp encrypt, 0 
	   00
 000001AD  75 02		jne doShift
				; If we're decrypting, make shift amount negative
 000001AF  F6 DC		neg ah
 000001B1			doShift:
 000001B1  E8 0000010A		call CipherShiftChar
				; Store result of shift back into phrase string
 000001B6  88 04 16		mov [edx + esi], al
				; Now we'll check if we have to wrap around to beginning of key
 000001B9  A0 0000014E R	mov al, keyIndex
 000001BE  3A 05 0000014D R	cmp al, theKeyLength
 000001C4  75 07		jne continue
 000001C6  C6 05 0000014E R	mov keyIndex, -1 ; Reset keyIndex
	   FF
 000001CD			continue:
 000001CD  FE 05 0000014E R	inc keyIndex
 000001D3  FE 05 0000014F R	inc phraseIndex
 000001D9  58			pop eax
 000001DA  E2 AC		loop eloop
 000001DC  5E			pop esi
 000001DD  C3			ret
 000001DE			EncryptDecrypt endp

 000001DE			LettersOnly proc
				; Description:  Removes all non-letter characters from string
				;
				; Receives:
				; EDX:  offset of string array
				;
				; Returns:  
				; EDX: offset of string array
				; EBX: new length of string
 000001DE  50			push eax
 000001DF  56			push esi
 000001E0  52			push edx
 000001E1  53			push ebx
 000001E2  BE 00000000		clearESI
 000001E7  B8 00000000		clearEAX

 000001EC			L1:
				; Move current element into al
 000001EC  8A 04 16		mov al, byte ptr [edx + esi]

				; Test if current element is NOT a capital letter
 000001EF  3C 41		cmp al, 41h
 000001F1  72 12		jb notLetter
 000001F3  3C 5B		cmp al, 5bh
 000001F5  72 00		jb letter

 000001F7			letter:
				; If current element IS letter:
				; Move element into element at ah
 000001F7  0F B6 DC		movzx ebx, ah
				; Make current element 0
 000001FA  C6 04 16 00		mov byte ptr [edx + esi], 0
				; Move letter into new position
 000001FE  88 04 13		mov byte ptr [edx + ebx], al
				; Increment ah so we get a new valid position
 00000201  FE C4		inc ah
 00000203  EB 04		jmp keepgoing

 00000205			notLetter:
				; If current element is NOT a letter:
				; Make current element 0
 00000205  C6 04 16 00		mov byte ptr [edx + esi], 0

 00000209			keepgoing:
 00000209  46			inc esi
 0000020A  E2 E0		LOOP L1

 0000020C			complete:
 0000020C  5B			pop ebx
 0000020D  88 23		mov byte ptr [ebx], ah  ; Return length of string
 0000020F  5A			pop edx
 00000210  5E			pop esi
 00000211  58			pop eax
 00000212  C3			ret
 00000213			LettersOnly endp

 00000213			EnterString proc
				; Description:  
				; Displays a prompt and receives a string from the user
				;
				; Receives:
				; EAX: The offset of the prompt string
				; EDX: The offset of the byte array to store the string in.
				;      Must have 50 elements.
				; EBX: The offset of the length of string
				;
				; Returns: 
				; EDX: string from user
				; EBX: length of string
				;
				; Requires:
				; Array must have 50 elements
 00000152			.data
 00000152 59 6F 75 20 68	errorMsg byte "You haven't entered anything, please try again.",0
	   61 76 65 6E 27
	   74 20 65 6E 74
	   65 72 65 64 20
	   61 6E 79 74 68
	   69 6E 67 2C 20
	   70 6C 65 61 73
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 2E 00
 00000213			.code
 00000213			start:
 00000213  E8 000000F8		call ClearString
 00000218  50			push eax
 00000219  52			push edx            ; saving the address of the string
 0000021A  92			xchg edx, eax       ; flip string offsets
 0000021B  E8 00000000 E	call writestring
 00000220  92			xchg edx, eax       ; flip them back
 00000221  B9 00000033		mov ecx, maxLength
 00000226  E8 00000000 E	call readstring
 0000022B  88 03		mov byte ptr [ebx], al     ;//length of user entered string, now in thestringlen
 0000022D  80 3B 00		cmp byte ptr [ebx], 0
 00000230  75 22		jne continue
 00000232  E8 00000000 E	call clrscr
 00000237  BA 00000152 R	mov edx, offset errorMsg
 0000023C  E8 00000000 E	call writestring
 00000241  E8 00000000 E	call crlf
 00000246  E8 00000000 E	call waitmsg
 0000024B  E8 00000000 E	call clrscr
 00000250  5A			pop edx
 00000251  58			pop eax
 00000252  EB BF		jmp start
 00000254			continue:
 00000254  5A			pop edx
 00000255  58			pop eax
 00000256  C3			ret
 00000257			EnterString endp

 00000257			ClearRegisters Proc
				; Description:  
				; Clears the registers EAX, EBX, ECX, EDX, ESI, EDI
				;
				; Requires:  
				; Nothing
				;
				; Returns:  
				; Nothing, but all registers will be cleared.

 00000257  B8 00000000		cleareax
 0000025C  BB 00000000		clearebx
 00000261  B9 00000000		clearecx
 00000266  BA 00000000		clearedx
 0000026B  BE 00000000		clearesi
 00000270  BF 00000000		clearedi

 00000275  C3			ret
 00000276			ClearRegisters ENDP

 00000276			DisplayMainMenu proc
				; Description:  
				; Displays the main menu
				; 
				; Receives: 
				; AL: 1 if phrase is entered already, 0 if no phrase has been entered.
				; EDX: Offset of phrase
				; 
				; Returns:  Nothing

 00000182			.data
 00000182 4D 41 49 4E 20	Menuprompt1 byte 'MAIN MENU', 0Ah, 0Dh,0
	   4D 45 4E 55 0A
	   0D 00
 0000018E 31 2E 20 45 6E	Menuprompt2 byte '1. Enter a phrase', 0Ah, 0Dh,
	   74 65 72 20 61
	   20 70 68 72 61
	   73 65 0A 0D 32
	   2E 20 45 6E 74
	   65 72 20 61 20
	   6B 65 79 0A 0D
	   33 2E 20 45 6E
	   63 72 79 70 74
	   20 70 68 72 61
	   73 65 0A 0D 34
	   2E 20 44 65 63
	   72 79 70 74 20
	   70 68 72 61 73
	   65 0A 0D 35 2E
	   20 45 78 69 74
	   20 0A 0D 00
				'2. Enter a key',0Ah, 0Dh,
				'3. Encrypt phrase',0Ah, 0Dh,
				'4. Decrypt phrase',0Ah, 0Dh,
				'5. Exit ',0Ah, 0Dh, 0h
 000001E2 43 75 72 72 65	phraseDisplay1 byte 'Current phrase: ',0
	   6E 74 20 70 68
	   72 61 73 65 3A
	   20 00

 000001F3 3D 3D 3D 3D 3D	seperator byte '==========', 0Ah, 0Dh, 0
	   3D 3D 3D 3D 3D
	   0A 0D 00
 00000276			.code
 00000276  E8 00000000 E	call clrscr
 0000027B  52			push edx

				; Display main menu
 0000027C  BA 00000182 R	mov edx, offset menuprompt1
 00000281  E8 00000000 E	call WriteString
 00000286  BA 000001F3 R	mov edx, offset seperator
 0000028B  E8 00000000 E	call writeString

				; If there's a phrase, display it
 00000290  3C 01		cmp al, 1
 00000292  75 20		jne continue
 00000294  BA 000001E2 R	mov edx, offset phrasedisplay1
 00000299  E8 00000000 E	call WriteString
 0000029E  5A			pop edx
 0000029F  E8 0000003A		call Printit
 000002A4  52			push edx
 000002A5  E8 00000000 E	call crlf
 000002AA  BA 000001F3 R	mov edx, offset seperator
 000002AF  E8 00000000 E	call WriteString

 000002B4			continue:
 000002B4  BA 0000018E R	mov edx, offset menuprompt2
 000002B9  E8 00000000 E	call WriteString
 000002BE  5A			pop edx
 000002BF  C3			ret
 000002C0			DisplayMainMenu endp

 000002C0			CipherShiftChar proc
				; Description:
				; Shifts a character through the alphabet by a pre-determined
				; number of spaces. Wraps around to beginning if necessary.
				; To shift a character to the left, pass in a negative number
				; To shift a character to the right, pass in a positive number
				;
				; Receives:
				; AH: Number of places to shift character.
				; AL: Character to shift.
				; 
				; Returns:
				; AL: Shifted character
 000002C0  02 C4		add al, ah
 000002C2  3C 40		cmp al, '@'
 000002C4  77 02		ja next
 000002C6  04 1A		add al, 1ah
 000002C8			next:
 000002C8  3C 5B		cmp al, '['
 000002CA  72 02		jb continue
 000002CC  2C 1A		sub al, 1ah
 000002CE			continue:
 000002CE  C3			ret
 000002CF			CipherShiftChar endp

 000002CF			Modulo proc
				; Description:
				; Performs a Modulo operation on an integer
				;
				; Receives:
				; AH: Divisor
				; AL: Dividend
				;
				; Returns: 
				; AH: Result
 00000200			.data
 00000200 00			divisor BYTE 0
 000002CF			.code
 000002CF  88 25 00000200 R	mov divisor, ah
 000002D5  B4 00		mov ah, 0
 000002D7  F6 35 00000200 R	div divisor
 000002DD  C3			ret
 000002DE			Modulo endp

 000002DE			Printit proc
				; Description:
				; Outputs a string in the format ***** ***** *****,
				; where each * represent a subsequent character in the
				; string.
				;
				; Receives:
				; EDX: Offset of string
				; 
				; Returns:
				; Nothing
				; 
				; Requires:
				; String length must be 50
 000002DE  56			push esi
 000002DF  51			push ecx
 000002E0  66| 50		push ax         ; AL will contain current character
				                ; AH will contain a counter used to determine when to output a space character
 000002E2  BE 00000000		mov esi, 0
 000002E7  66| B8 0000		mov ax, 0
 000002EB  B9 00000032		mov ecx, 50
 000002F0			printLoop:
 000002F0  8A 04 16		mov al, [edx + esi]
 000002F3  E8 00000000 E	call WriteChar
 000002F8  FE C4		inc ah
 000002FA  80 FC 05		cmp ah, 5       ; If counter is 4, we output a null character and reset counter
 000002FD  75 09		jne continue
 000002FF  66| B8 0000		mov ax, 0       ; Set both counter and character to output to '0'
 00000303  E8 00000000 E	call WriteChar
 00000308			continue:
 00000308  46			inc esi
 00000309  E2 E5		loop printLoop
 0000030B  66| 58		pop ax
 0000030D  59			pop ecx
 0000030E  5E			pop esi
 0000030F  C3			ret
 00000310			Printit endp

 00000310			ClearString proc
				; Description:
				; Clears a string
				; 
				; Receives:
				; EDX: Offset of string
				; EBX: Offset of size of string
				;
				; Requires:
				; String must have max length of 50
 00000310  51			push ecx
 00000311  56			push esi
 00000312  BE 00000000		mov esi, 0
 00000317  B9 00000032		mov ecx, 50
 0000031C			clearLoop:
 0000031C  C6 04 16 00		mov byte ptr [edx + esi], 0
 00000320  46			inc esi
 00000321  E2 F9		loop clearLoop
 00000323  5E			pop esi
 00000324  59			pop ecx
 00000325  C3			ret
 00000326			ClearString endp

				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    04/06/18 22:49:35
	: HW6.as					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000201 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000326 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ChangeCase . . . . . . . . . . .	P Near	 00000140 _TEXT	Length= 00000022 Public STDCALL
  letterLoop . . . . . . . . . .	L Near	 0000014B _TEXT	
  keepgoing  . . . . . . . . . .	L Near	 0000015B _TEXT	
CipherShiftChar  . . . . . . . .	P Near	 000002C0 _TEXT	Length= 0000000F Public STDCALL
  next . . . . . . . . . . . . .	L Near	 000002C8 _TEXT	
  continue . . . . . . . . . . .	L Near	 000002CE _TEXT	
ClearRegisters . . . . . . . . .	P Near	 00000257 _TEXT	Length= 0000001F Public STDCALL
ClearString  . . . . . . . . . .	P Near	 00000310 _TEXT	Length= 00000016 Public STDCALL
  clearLoop  . . . . . . . . . .	L Near	 0000031C _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayMainMenu  . . . . . . . .	P Near	 00000276 _TEXT	Length= 0000004A Public STDCALL
  continue . . . . . . . . . . .	L Near	 000002B4 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EncryptDecrypt . . . . . . . . .	P Near	 00000162 _TEXT	Length= 0000007C Public STDCALL
  eLoop  . . . . . . . . . . . .	L Near	 00000188 _TEXT	
  doShift  . . . . . . . . . . .	L Near	 000001B1 _TEXT	
  continue . . . . . . . . . . .	L Near	 000001CD _TEXT	
EnterString  . . . . . . . . . .	P Near	 00000213 _TEXT	Length= 00000044 Public STDCALL
  start  . . . . . . . . . . . .	L Near	 00000213 _TEXT	
  continue . . . . . . . . . . .	L Near	 00000254 _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LettersOnly  . . . . . . . . . .	P Near	 000001DE _TEXT	Length= 00000035 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000001EC _TEXT	
  letter . . . . . . . . . . . .	L Near	 000001F7 _TEXT	
  notLetter  . . . . . . . . . .	L Near	 00000205 _TEXT	
  keepgoing  . . . . . . . . . .	L Near	 00000209 _TEXT	
  complete . . . . . . . . . . .	L Near	 0000020C _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Modulo . . . . . . . . . . . . .	P Near	 000002CF _TEXT	Length= 0000000F Public STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Printit  . . . . . . . . . . . .	P Near	 000002DE _TEXT	Length= 00000032 Public STDCALL
  printLoop  . . . . . . . . . .	L Near	 000002F0 _TEXT	
  continue . . . . . . . . . . .	L Near	 00000308 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000140 Public STDCALL
  startHere  . . . . . . . . . .	L Near	 00000005 _TEXT	
  opt1 . . . . . . . . . . . . .	L Near	 0000001E _TEXT	
  opt2 . . . . . . . . . . . . .	L Near	 00000053 _TEXT	
  opt3 . . . . . . . . . . . . .	L Near	 0000007E _TEXT	
  opt4 . . . . . . . . . . . . .	L Near	 000000C4 _TEXT	
  opt5 . . . . . . . . . . . . .	L Near	 00000102 _TEXT	
  oops . . . . . . . . . . . . .	L Near	 0000010D _TEXT	
  invalid  . . . . . . . . . . .	L Near	 00000123 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000139 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
ClearEAX . . . . . . . . . . . .	Text   	 mov eax, 0
ClearEBX . . . . . . . . . . . .	Text   	 mov ebx, 0
ClearECX . . . . . . . . . . . .	Text   	 mov ecx, 0
ClearEDI . . . . . . . . . . . .	Text   	 mov edi, 0
ClearEDX . . . . . . . . . . . .	Text   	 mov edx, 0
ClearESI . . . . . . . . . . . .	Text   	 mov esi, 0
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
Menuprompt1  . . . . . . . . . .	Byte	 00000182 _DATA	
Menuprompt2  . . . . . . . . . .	Byte	 0000018E _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currentLetter  . . . . . . . . .	Byte	 00000150 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
divisor  . . . . . . . . . . . .	Byte	 00000200 _DATA	
encrypt  . . . . . . . . . . . .	Byte	 00000151 _DATA	
errorMessage . . . . . . . . . .	Byte	 000000C7 _DATA	
errorMsg . . . . . . . . . . . .	Byte	 00000152 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
invalidMessage . . . . . . . . .	Byte	 000000FF _DATA	
keyIndex . . . . . . . . . . . .	Byte	 0000014E _DATA	
keyLength  . . . . . . . . . . .	Byte	 00000098 _DATA	
keyPrompt  . . . . . . . . . . .	Byte	 0000009A _DATA	
keySet . . . . . . . . . . . . .	Byte	 00000099 _DATA	
key  . . . . . . . . . . . . . .	Byte	 00000065 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxLength  . . . . . . . . . . .	Number	 00000033h   
phraseDisplay1 . . . . . . . . .	Byte	 000001E2 _DATA	
phraseIndex  . . . . . . . . . .	Byte	 0000014F _DATA	
phraseLength . . . . . . . . . .	Byte	 00000033 _DATA	
phrasePrompt . . . . . . . . . .	Byte	 00000035 _DATA	
phraseSet  . . . . . . . . . . .	Byte	 00000034 _DATA	
phrase . . . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
seperator  . . . . . . . . . . .	Byte	 000001F3 _DATA	
theKeyLength . . . . . . . . . .	Byte	 0000014D _DATA	
userChoice . . . . . . . . . . .	Byte	 0000014C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
