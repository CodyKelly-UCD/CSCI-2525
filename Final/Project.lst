Microsoft (R) Macro Assembler Version 14.00.24210.0	    05/02/18 12:25:14
: Final.as						     Page 1 - 1


				TITLE: Final.asm

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				Menu proto maxOption:dword, prompt:ptr byte, choice:ptr dword, errorMsg: ptr byte
				ConnectThree proto modePrompt:ptr byte, columnPrompt:ptr byte, errorMsg:ptr byte
				GetGameMode proto prompt:ptr byte, errorMsg:ptr byte, playerTypesAddr:ptr byte
				ChooseFirstPlayer proto playerNumber:ptr byte
				DisplayGrid proto gridAddr:ptr byte
				PrintGridRow proto leftChar:ptr byte, rightChar:ptr byte, middleChar:ptr byte, dividerChar:ptr byte, cellWidth:ptr byte

 00000000			.data
 00000000 57 65 6C 63 6F	mainMenuPrompt byte "Welcome to Connect Three! Please select an option:", 0Ah, 0Dh, "1) Play new game", 0Ah, 0Dh, "2) Show stats", 0Ah, 0Dh, "3) Exit", 0
	   6D 65 20 74 6F
	   20 43 6F 6E 6E
	   65 63 74 20 54
	   68 72 65 65 21
	   20 50 6C 65 61
	   73 65 20 73 65
	   6C 65 63 74 20
	   61 6E 20 6F 70
	   74 69 6F 6E 3A
	   0A 0D 31 29 20
	   50 6C 61 79 20
	   6E 65 77 20 67
	   61 6D 65 0A 0D
	   32 29 20 53 68
	   6F 77 20 73 74
	   61 74 73 0A 0D
	   33 29 20 45 78
	   69 74 00
 0000005D 50 6C 65 61 73	gameModePrompt byte "Please select a game mode:", 0Ah, 0Dh, "1) Human vs. human", 0Ah, 0Dh, "2) Human vs. computer", 0Ah, 0Dh, "3) Computer vs. computer", 0
	   65 20 73 65 6C
	   65 63 74 20 61
	   20 67 61 6D 65
	   20 6D 6F 64 65
	   3A 0A 0D 31 29
	   20 48 75 6D 61
	   6E 20 76 73 2E
	   20 68 75 6D 61
	   6E 0A 0D 32 29
	   20 48 75 6D 61
	   6E 20 76 73 2E
	   20 63 6F 6D 70
	   75 74 65 72 0A
	   0D 33 29 20 43
	   6F 6D 70 75 74
	   65 72 20 76 73
	   2E 20 63 6F 6D
	   70 75 74 65 72
	   00
 000000BD 50 6C 65 61 73	selectColumnPrompt byte "Please select a column to drop your piece (1 - 5): "
	   65 20 73 65 6C
	   65 63 74 20 61
	   20 63 6F 6C 75
	   6D 6E 20 74 6F
	   20 64 72 6F 70
	   20 79 6F 75 72
	   20 70 69 65 63
	   65 20 28 31 20
	   2D 20 35 29 3A
	   20
 000000F0 59 6F 75 20 68	invalidChoicePrompt byte "You have entered an invalid choice. Please enter a number from 1 to ",0
	   61 76 65 20 65
	   6E 74 65 72 65
	   64 20 61 6E 20
	   69 6E 76 61 6C
	   69 64 20 63 68
	   6F 69 63 65 2E
	   20 50 6C 65 61
	   73 65 20 65 6E
	   74 65 72 20 61
	   20 6E 75 6D 62
	   65 72 20 66 72
	   6F 6D 20 31 20
	   74 6F 20 00
 00000135 00000003		maxMenuOption dword 3
 00000139 00000001		userChoice dword 1
 0000013D  00000002 [		playerTypes byte 2 dup(0)
	    00
	   ]
 0000013F 00			currentPlayer byte 0
 00000140  00000004 [		grid    byte 4 dup(0)
	    00
	   ]
 00000144 = 00000004		gridLength = ($ - grid)
 00000144  00000004 [		        byte 4 dup(0)
	    00
	   ]
 00000148  00000004 [		        byte 4 dup(0)
	    00
	   ]
 0000014C  00000004 [		        byte 4 dup(0)
	    00
	   ]

 00000150 10 59 6F 75 27	s1 byte, "You've selected option ", 0
	   76 65 20 73 65
	   6C 65 63 74 65
	   64 20 6F 70 74
	   69 6F 6E 20 00
 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E	call Randomize

 00000005			start:
				; Display main menu and get user's choice
 00000005  E8 00000000 E	call ClrScr
				;INVOKE Menu, maxMenuOption, ADDR mainMenuPrompt, ADDR userChoice, ADDR invalidChoicePrompt

 0000000A			opt1:
				; Play Connect Three
 0000000A  83 3D 00000139 R	cmp userChoice, 1
	   01
 00000011  75 20		jne opt2
				;INVOKE GetGameMode, ADDR gameModePrompt, ADDR invalidChoicePrompt, ADDR playerTypes
				INVOKE ChooseFirstPlayer, ADDR currentPlayer
 00000013  68 0000013F R   *	    push   OFFSET currentPlayer
 00000018  E8 0000013D	   *	    call   ChooseFirstPlayer
 0000001D  E8 00000000 E	call ClrScr
				INVOKE DisplayGrid, ADDR grid
 00000022  68 00000140 R   *	    push   OFFSET grid
 00000027  E8 0000019C	   *	    call   DisplayGrid
 0000002C  E8 00000000 E	call waitMsg
 00000031  EB D2		jmp start

 00000033			opt2:
				; Show stats
 00000033  83 3D 00000139 R	cmp userChoice, 2
	   02
 0000003A  75 25		jne done
 0000003C  BA 00000150 R	mov edx, offset s1
 00000041  B8 00000003		mov eax, 3
 00000046  E8 00000000 E	call ClrScr
 0000004B  E8 00000000 E	call WriteString
 00000050  E8 00000000 E	call WriteDec
 00000055  E8 00000000 E	call CRLF
 0000005A  E8 00000000 E	call WaitMsg
 0000005F  EB A4		jmp start

 00000061			done:
				exit
 00000061  6A 00	   *	    push   +000000000h
 00000063  E8 00000000 E   *	    call   ExitProcess
 00000068			main ENDP

				; -----------------------------------------------------------------------------
 00000068			Menu proc maxOption:dword, prompt:ptr byte, choice:ptr dword, errorMsg:ptr byte
				; Displays the prompt given, gets a selection from the user, checks if the
				; selection is more than or equal to one and less than or equal to maxOption,
				; and stores the result into the memory at choice.
				;
				; Receives:
				; maxOption: The maximum number the user is allowed to select.
				; prompt: A pointer to a string telling the user what they're selecting.
				; choice: A pointer to where this procedure should store the result
				; errorMsg: This string is displayed when the user selects an invalid option
				;
				; Returns:
				; choice: The number of the menu option the user chose.

				LOCAL beginString:dword, period:dword
 00000068  55		   *	    push   ebp
 00000069  8B EC	   *	    mov    ebp, esp
 0000006B  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 0000006E  C7 45 FC		mov beginString, '>'
	   0000003E
 00000075  C7 45 FD		mov beginString[1], ' '
	   00000020
 0000007C  C7 45 F8		mov period, '.'
	   0000002E

 00000083  60			pushad

 00000084			start:
				; First let's display the menu prompt
 00000084  8B 55 0C		mov edx, prompt
 00000087  E8 00000000 E	call WriteString
 0000008C  E8 00000000 E	call CRLF
 00000091  8D 55 FC		lea edx, beginString
 00000094  E8 00000000 E	call WriteString

				; Receive the user's option
 00000099  8B 75 10		mov esi, choice
 0000009C  E8 00000000 E	call ReadHex
 000000A1  89 06		mov [esi], eax

				; Check to see if the input is within the valid range
				; Start over if:
				; The number is below 1
 000000A3  B8 00000001		mov eax, 1
 000000A8  39 06		cmp [esi], eax
 000000AA  72 09		jb tryAgain
				; The number is above the max range
 000000AC  8B 45 08		mov eax, maxOption
 000000AF  39 06		cmp [esi], eax
 000000B1  77 02		ja tryAgain

				; If we're here, then the user successfully entered a menu option. 
				; Yay for them!
 000000B3  EB 2E		jmp done

 000000B5			tryAgain:
				; If we're here, the user's gone and messed up. Let's ask them to try again.
				; First we display the main part of the error message
 000000B5  E8 00000000 E	call ClrScr
 000000BA  8B 55 14		mov edx, errorMsg
 000000BD  E8 00000000 E	call WriteString

				; Then we output the upper limit of correct choices.
 000000C2  8B 45 08		mov eax, maxOption
 000000C5  E8 00000000 E	call WriteDec
 000000CA  8D 55 F8		lea edx, period
 000000CD  E8 00000000 E	call WriteString
 000000D2  E8 00000000 E	call CRLF
 000000D7  E8 00000000 E	call WaitMsg
 000000DC  E8 00000000 E	call ClrScr

				; And start over
 000000E1  EB A1		jmp start

 000000E3			done:
 000000E3  C9		   *	    leave  
 000000E4  C2 0010		ret 16
 000000E7			Menu endp

				; -----------------------------------------------------------------------------
 000000E7			GetGameMode proc prompt: ptr byte, errorMsg: ptr byte, playerTypesAddr:ptr byte
				; This procedure asks the user to choose a Connect Three game mode.
				; The user will choose either:
				; 1) Human vs. human
				; 2) Human vs. computer
				; 3) Computer vs. computer
				LOCAL maxOptions:dword, choice:dword, choiceAddr: ptr dword
 000000E7  55		   *	    push   ebp
 000000E8  8B EC	   *	    mov    ebp, esp
 000000EA  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 000000ED  60			pushad

 000000EE  8D 45 F8		lea eax, choice
 000000F1  89 45 F4		mov choiceAddr, eax
 000000F4  C7 45 F8		mov choice, 0
	   00000000

				; Display game mode menu and get user option
 000000FB  C7 45 FC		mov maxOptions, 3
	   00000003
 00000102  E8 00000000 E	call ClrScr
				INVOKE Menu, maxOptions, prompt, choiceAddr, errorMsg
 00000107  FF 75 0C	   *	    push   dword  ptr ss:[ebp]+00000000Ch
 0000010A  FF 75 F4	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF4h
 0000010D  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000110  FF 75 FC	   *	    push   dword  ptr ss:[ebp]+0FFFFFFFCh
 00000113  E8 FFFFFF50	   *	    call   Menu

 00000118  8B 75 F8		mov esi, choice
 0000011B  8B 06		mov eax, [esi]

				; Now we set up our game with the correct player types
 0000011D			humanVsHuman:
 0000011D  83 F8 01		cmp eax, 1
 00000120  75 10		jne humanVsComputer
 00000122  C7 45 10		mov playerTypesAddr[0], 1   ; One for human
	   00000001
 00000129  C7 45 11		mov playerTypesAddr[1], 1
	   00000001
 00000130  EB 23		jmp done

 00000132			humanVsComputer:
 00000132  83 F8 02		cmp eax, 2
 00000135  75 10		jne computerVsComputer
 00000137  C7 45 10		mov playerTypesAddr[0], 1
	   00000001
 0000013E  C7 45 11		mov playerTypesAddr[1], 0   ; Zero for computer
	   00000000
 00000145  EB 0E		jmp done

 00000147			computerVsComputer:
 00000147  C7 45 10		mov playerTypesAddr[0], 0
	   00000000
 0000014E  C7 45 11		mov playerTypesAddr[1], 0
	   00000000

 00000155			done:
 00000155  61			popad
 00000156  C9		   *	    leave  
 00000157  C2 000C		ret 12
 0000015A			GetGameMode endp

				; -----------------------------------------------------------------------------
 0000015A			ChooseFirstPlayer proc playerNumber:ptr byte
				; Gets a random number, either 1 or 0, and stores it at the address in
				; playerNumber
				;
				; Receives:
				; playerNumber: The address to store the result
				;
				; Returns:
				; Either a 1 or 0 at the address in playerNumber
 0000015A  55		   *	    push   ebp
 0000015B  8B EC	   *	    mov    ebp, esp
 0000015D  50			push eax
 0000015E  56			push esi
 0000015F  B8 00000001		mov eax, 1
 00000164  E8 00000000 E	call RandomRange
 00000169  8B 75 08		mov esi, playerNumber
 0000016C  88 06		mov byte ptr [esi], al
 0000016E  5E			pop esi
 0000016F  58			pop eax
 00000170  C9		   *	    leave  
 00000171  C2 0004		ret 4
 00000174			ChooseFirstPlayer endp

				; -----------------------------------------------------------------------------
 00000174			PrintGridRow proc leftChar:ptr byte, rightChar:ptr byte, middleChar:ptr byte, dividerChar:ptr byte, cellWidth:ptr byte
				; This procedure prints a single row of ascii characters representing our game grid. It prints a single character 
				; for the left side, the contents of the middle of the grid, then a single character on the right side.
				; The middle contents are printed four times - one for each cell in a row - and divided by a single character to show
				; where each column is split.
				;
				; Receives:
				; leftChar: Character printed on the left side of the row
				; rightChar: Character printed on the not left side
				; middleChar: Character spanning each cell
				; dividerChar: Character dividing each cell
				; cellWidth: Width of each cell
 00000174  55		   *	    push   ebp
 00000175  8B EC	   *	    mov    ebp, esp
 00000177  56			push esi
 00000178  50			push eax
 00000179  51			push ecx

				; Print left char first
 0000017A  8B 75 08		mov esi, leftChar
 0000017D  8A 06		mov al, [esi]
 0000017F  E8 00000000 E	call WriteChar

				; Print middle 
 00000184  B9 00000004		mov ecx, 4
 00000189			L1:
 00000189  51			push ecx
				; Set ECX to cellWidth
 0000018A  8B 75 18		mov esi, cellWidth
 0000018D  B9 00000000		mov ecx, 0
 00000192  8A 0E		mov cl, [esi]
				; Set AL to middleChar for printing
 00000194  8B 75 10		mov esi, middleChar
 00000197  8A 06		mov al, [esi]
				; Print middle of cell
 00000199			L2:
 00000199  E8 00000000 E	call WriteChar
 0000019E  E2 F9		LOOP L2
				; If we're on the last column, we don't need another divider
 000001A0  59			pop ecx
 000001A1  83 F9 01		cmp ecx, 1
 000001A4  76 0A		jbe L1Done
 000001A6  8B 75 14		mov esi, dividerChar
 000001A9  8A 06		mov al, [esi]
 000001AB  E8 00000000 E	call WriteChar
 000001B0			L1Done:
 000001B0  E2 D7		loop L1

				; Top right corner
 000001B2  8B 75 0C		mov esi, rightChar
 000001B5  8A 06		mov al, [esi]
 000001B7  E8 00000000 E	call WriteChar
 000001BC  E8 00000000 E	call CRLF

 000001C1  59			pop ecx
 000001C2  58			pop eax
 000001C3  5E			pop esi
 000001C4  C9		   *	    leave  
 000001C5  C2 0014		ret 20
 000001C8			PrintGridRow endp

				; -----------------------------------------------------------------------------
 000001C8			DisplayGrid proc gridAddr:ptr byte
				; Repeatedly prints one row of the game grid at a time until the whole grid is 
				; displayed on screen.
				;
				; Receives:
				; gridAddr: The address of the game grid array

				LOCAL rowCount:byte, cellWidth:byte, cellHeight:byte, leftChar:byte, rightChar:byte, middleChar:byte, dividerChar:byte
 000001C8  55		   *	    push   ebp
 000001C9  8B EC	   *	    mov    ebp, esp
 000001CB  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 000001CE  60			pushad

				; Save default text color
 000001CF  B8 00000000		mov eax, 0
 000001D4  E8 00000000 E	call GetTextColor
 000001D9  50			push eax

				; Set grid color
 000001DA  B8 0000000E		mov eax, 14
 000001DF  E8 00000000 E	call SetTextColor

				; Set cell size
 000001E4  C6 45 FE 0C		mov cellWidth, 12    ; Optimal at 12
 000001E8  C6 45 FD 05		mov cellHeight, 5   ; Optimal at 5

				; Setup grid matrix indexing
 000001EC  C6 45 FF 00		mov rowCount, 0
 000001F0  8D 05 00000140 R	lea eax, grid

				; First output top of grid
 000001F6  C6 45 FC C9		mov leftChar, 201
 000001FA  C6 45 FB BB		mov rightChar, 187
 000001FE  C6 45 FA CD		mov middleChar, 205
 00000202  C6 45 F9 D1		mov dividerChar, 209
				INVOKE PrintGridRow, ADDR leftChar, ADDR rightChar, ADDR middleChar, ADDR dividerChar, ADDR cellWidth
 00000206  8D 45 FE	   *	    lea    eax, byte  ptr ss:[ebp]+0FEh
 00000209  50		   *	    push   eax
 0000020A  8D 45 F9	   *	    lea    eax, byte  ptr ss:[ebp]+0F9h
 0000020D  50		   *	    push   eax
 0000020E  8D 45 FA	   *	    lea    eax, byte  ptr ss:[ebp]+0FAh
 00000211  50		   *	    push   eax
 00000212  8D 45 FB	   *	    lea    eax, byte  ptr ss:[ebp]+0FBh
 00000215  50		   *	    push   eax
 00000216  8D 45 FC	   *	    lea    eax, byte  ptr ss:[ebp]+0FCh
 00000219  50		   *	    push   eax
 0000021A  E8 FFFFFF55	   *	    call   PrintGridRow

				; Then print middle of grid
 0000021F  B9 00000004		mov ecx, 4
 00000224			L1:
 00000224  51			push ecx
				; Set ECX to cellHeight
 00000225  0F B6 4D FD		movzx ecx, cellHeight
				; Set contents of row
 00000229  C6 45 FC BA		mov leftChar, 186
 0000022D  C6 45 FB BA		mov rightChar, 186
 00000231  C6 45 FA 20		mov middleChar, ' '
 00000235  C6 45 F9 B3		mov dividerChar, 179
				; Print row
 00000239			L2:
				INVOKE PrintGridRow, ADDR leftChar, ADDR rightChar, ADDR middleChar, ADDR dividerChar, ADDR cellWidth
 00000239  8D 45 FE	   *	    lea    eax, byte  ptr ss:[ebp]+0FEh
 0000023C  50		   *	    push   eax
 0000023D  8D 45 F9	   *	    lea    eax, byte  ptr ss:[ebp]+0F9h
 00000240  50		   *	    push   eax
 00000241  8D 45 FA	   *	    lea    eax, byte  ptr ss:[ebp]+0FAh
 00000244  50		   *	    push   eax
 00000245  8D 45 FB	   *	    lea    eax, byte  ptr ss:[ebp]+0FBh
 00000248  50		   *	    push   eax
 00000249  8D 45 FC	   *	    lea    eax, byte  ptr ss:[ebp]+0FCh
 0000024C  50		   *	    push   eax
 0000024D  E8 FFFFFF22	   *	    call   PrintGridRow
 00000252  E2 E5		LOOP L2
				; If we're on the last row, we don't need another divider
 00000254  59			pop ecx
 00000255  83 F9 01		cmp ecx, 1
 00000258  76 29		jbe L1Done
 0000025A  C6 45 FC C7		mov leftChar, 199
 0000025E  C6 45 FB B6		mov rightChar, 182
 00000262  C6 45 FA C4		mov middleChar, 196
 00000266  C6 45 F9 C5		mov dividerChar, 197
				INVOKE PrintGridRow, ADDR leftChar, ADDR rightChar, ADDR middleChar, ADDR dividerChar, ADDR cellWidth
 0000026A  8D 45 FE	   *	    lea    eax, byte  ptr ss:[ebp]+0FEh
 0000026D  50		   *	    push   eax
 0000026E  8D 45 F9	   *	    lea    eax, byte  ptr ss:[ebp]+0F9h
 00000271  50		   *	    push   eax
 00000272  8D 45 FA	   *	    lea    eax, byte  ptr ss:[ebp]+0FAh
 00000275  50		   *	    push   eax
 00000276  8D 45 FB	   *	    lea    eax, byte  ptr ss:[ebp]+0FBh
 00000279  50		   *	    push   eax
 0000027A  8D 45 FC	   *	    lea    eax, byte  ptr ss:[ebp]+0FCh
 0000027D  50		   *	    push   eax
 0000027E  E8 FFFFFEF1	   *	    call   PrintGridRow
 00000283			L1Done:
 00000283  E2 9F		loop L1

				; Print the bottom of the grid
 00000285  C6 45 FC C8		mov leftChar, 200
 00000289  C6 45 FB BC		mov rightChar, 188
 0000028D  C6 45 FA CD		mov middleChar, 205
 00000291  C6 45 F9 CF		mov dividerChar, 207
				INVOKE PrintGridRow, ADDR leftChar, ADDR rightChar, ADDR middleChar, ADDR dividerChar, ADDR cellWidth
 00000295  8D 45 FE	   *	    lea    eax, byte  ptr ss:[ebp]+0FEh
 00000298  50		   *	    push   eax
 00000299  8D 45 F9	   *	    lea    eax, byte  ptr ss:[ebp]+0F9h
 0000029C  50		   *	    push   eax
 0000029D  8D 45 FA	   *	    lea    eax, byte  ptr ss:[ebp]+0FAh
 000002A0  50		   *	    push   eax
 000002A1  8D 45 FB	   *	    lea    eax, byte  ptr ss:[ebp]+0FBh
 000002A4  50		   *	    push   eax
 000002A5  8D 45 FC	   *	    lea    eax, byte  ptr ss:[ebp]+0FCh
 000002A8  50		   *	    push   eax
 000002A9  E8 FFFFFEC6	   *	    call   PrintGridRow

 000002AE  E8 00000000 E	call CRLF

				; Reset text color
 000002B3  58			pop eax
 000002B4  E8 00000000 E	call SetTextColor

 000002B9  61			popad
 000002BA  C9		   *	    leave  
 000002BB  C2 0004		RET 4
 000002BE			DisplayGrid endp
Final.asm(341) : warning A6004:procedure argument or local not referenced : gridAddr



				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    05/02/18 12:25:14
: Final.as						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000169 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002BE Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ChooseFirstPlayer  . . . . . . .	P Near	 0000015A _TEXT	Length= 0000001A Public STDCALL
  playerNumber . . . . . . . . .	DWord	 bp + 00000008
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ConnectThree . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayGrid  . . . . . . . . . .	P Near	 000001C8 _TEXT	Length= 000000F6 Public STDCALL
  gridAddr . . . . . . . . . . .	DWord	 bp + 00000008
  rowCount . . . . . . . . . . .	Byte	 bp - 00000001
  cellWidth  . . . . . . . . . .	Byte	 bp - 00000002
  cellHeight . . . . . . . . . .	Byte	 bp - 00000003
  leftChar . . . . . . . . . . .	Byte	 bp - 00000004
  rightChar  . . . . . . . . . .	Byte	 bp - 00000005
  middleChar . . . . . . . . . .	Byte	 bp - 00000006
  dividerChar  . . . . . . . . .	Byte	 bp - 00000007
  L1 . . . . . . . . . . . . . .	L Near	 00000224 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000239 _TEXT	
  L1Done . . . . . . . . . . . .	L Near	 00000283 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetGameMode  . . . . . . . . . .	P Near	 000000E7 _TEXT	Length= 00000073 Public STDCALL
  prompt . . . . . . . . . . . .	DWord	 bp + 00000008
  errorMsg . . . . . . . . . . .	DWord	 bp + 0000000C
  playerTypesAddr  . . . . . . .	DWord	 bp + 00000010
  maxOptions . . . . . . . . . .	DWord	 bp - 00000004
  choice . . . . . . . . . . . .	DWord	 bp - 00000008
  choiceAddr . . . . . . . . . .	DWord	 bp - 0000000C
  humanVsHuman . . . . . . . . .	L Near	 0000011D _TEXT	
  humanVsComputer  . . . . . . .	L Near	 00000132 _TEXT	
  computerVsComputer . . . . . .	L Near	 00000147 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000155 _TEXT	
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Menu . . . . . . . . . . . . . .	P Near	 00000068 _TEXT	Length= 0000007F Public STDCALL
  maxOption  . . . . . . . . . .	DWord	 bp + 00000008
  prompt . . . . . . . . . . . .	DWord	 bp + 0000000C
  choice . . . . . . . . . . . .	DWord	 bp + 00000010
  errorMsg . . . . . . . . . . .	DWord	 bp + 00000014
  beginString  . . . . . . . . .	DWord	 bp - 00000004
  period . . . . . . . . . . . .	DWord	 bp - 00000008
  start  . . . . . . . . . . . .	L Near	 00000084 _TEXT	
  tryAgain . . . . . . . . . . .	L Near	 000000B5 _TEXT	
  done . . . . . . . . . . . . .	L Near	 000000E3 _TEXT	
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintGridRow . . . . . . . . . .	P Near	 00000174 _TEXT	Length= 00000054 Public STDCALL
  leftChar . . . . . . . . . . .	DWord	 bp + 00000008
  rightChar  . . . . . . . . . .	DWord	 bp + 0000000C
  middleChar . . . . . . . . . .	DWord	 bp + 00000010
  dividerChar  . . . . . . . . .	DWord	 bp + 00000014
  cellWidth  . . . . . . . . . .	DWord	 bp + 00000018
  L1 . . . . . . . . . . . . . .	L Near	 00000189 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000199 _TEXT	
  L1Done . . . . . . . . . . . .	L Near	 000001B0 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000068 Public STDCALL
  start  . . . . . . . . . . . .	L Near	 00000005 _TEXT	
  opt1 . . . . . . . . . . . . .	L Near	 0000000A _TEXT	
  opt2 . . . . . . . . . . . . .	L Near	 00000033 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000061 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currentPlayer  . . . . . . . . .	Byte	 0000013F _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameModePrompt . . . . . . . . .	Byte	 0000005D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
gridLength . . . . . . . . . . .	Number	 00000004h   
grid . . . . . . . . . . . . . .	Byte	 00000140 _DATA	
invalidChoicePrompt  . . . . . .	Byte	 000000F0 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mainMenuPrompt . . . . . . . . .	Byte	 00000000 _DATA	
maxMenuOption  . . . . . . . . .	DWord	 00000135 _DATA	
playerTypes  . . . . . . . . . .	Byte	 0000013D _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
s1 . . . . . . . . . . . . . . .	Byte	 00000150 _DATA	
selectColumnPrompt . . . . . . .	Byte	 000000BD _DATA	
userChoice . . . . . . . . . . .	DWord	 00000139 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
