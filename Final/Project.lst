Microsoft (R) Macro Assembler Version 14.00.24210.0	    05/01/18 19:26:52
: Final.as						     Page 1 - 1


				TITLE: Final.asm

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				Menu proto maxOption:dword, prompt:ptr byte, choice:ptr dword, errorMsg: ptr byte
				ConnectThree proto modePrompt:ptr byte, columnPrompt:ptr byte, errorMsg:ptr byte
				GetGameMode proto prompt:ptr byte, errorMsg:ptr byte, playerTypesAddr:ptr byte
				ChooseFirstPlayer proto playerNumber:ptr byte
				DisplayGrid proto gridAddr:ptr byte

 00000000			.data
 00000000 57 65 6C 63 6F	mainMenuPrompt byte "Welcome! Please select an option:", 0Ah, 0Dh, "1) Play Connect Three", 0Ah, 0Dh, "2) Show stats", 0Ah, 0Dh, "3) Exit", 0
	   6D 65 21 20 50
	   6C 65 61 73 65
	   20 73 65 6C 65
	   63 74 20 61 6E
	   20 6F 70 74 69
	   6F 6E 3A 0A 0D
	   31 29 20 50 6C
	   61 79 20 43 6F
	   6E 6E 65 63 74
	   20 54 68 72 65
	   65 0A 0D 32 29
	   20 53 68 6F 77
	   20 73 74 61 74
	   73 0A 0D 33 29
	   20 45 78 69 74
	   00
 00000051 57 65 6C 63 6F	gameModePrompt byte "Welcome to Connect Three! Please select a game mode:", 0Ah, 0Dh, "1) Human vs. human", 0Ah, 0Dh, "2) Human vs. computer", 0Ah, 0Dh, "3) Computer vs. computer", 0
	   6D 65 20 74 6F
	   20 43 6F 6E 6E
	   65 63 74 20 54
	   68 72 65 65 21
	   20 50 6C 65 61
	   73 65 20 73 65
	   6C 65 63 74 20
	   61 20 67 61 6D
	   65 20 6D 6F 64
	   65 3A 0A 0D 31
	   29 20 48 75 6D
	   61 6E 20 76 73
	   2E 20 68 75 6D
	   61 6E 0A 0D 32
	   29 20 48 75 6D
	   61 6E 20 76 73
	   2E 20 63 6F 6D
	   70 75 74 65 72
	   0A 0D 33 29 20
	   43 6F 6D 70 75
	   74 65 72 20 76
	   73 2E 20 63 6F
	   6D 70 75 74 65
	   72 00
 000000CB 50 6C 65 61 73	selectColumnPrompt byte "Please select a column to drop your piece (1 - 5): "
	   65 20 73 65 6C
	   65 63 74 20 61
	   20 63 6F 6C 75
	   6D 6E 20 74 6F
	   20 64 72 6F 70
	   20 79 6F 75 72
	   20 70 69 65 63
	   65 20 28 31 20
	   2D 20 35 29 3A
	   20
 000000FE 59 6F 75 20 68	invalidChoicePrompt byte "You have entered an invalid choice. Please enter a number from 1 to ",0
	   61 76 65 20 65
	   6E 74 65 72 65
	   64 20 61 6E 20
	   69 6E 76 61 6C
	   69 64 20 63 68
	   6F 69 63 65 2E
	   20 50 6C 65 61
	   73 65 20 65 6E
	   74 65 72 20 61
	   20 6E 75 6D 62
	   65 72 20 66 72
	   6F 6D 20 31 20
	   74 6F 20 00
 00000143 00000003		maxMenuOption dword 3
 00000147 00000000		userChoice dword 0
 0000014B  00000002 [		playerTypes byte 2 dup(0)
	    00
	   ]
 0000014D 00			currentPlayer byte 0
 0000014E  00000004 [		grid    byte 4 dup(0)
	    00
	   ]
 00000152 = 00000004		gridLength = ($ - grid)
 00000152  00000004 [		        byte 4 dup(0)
	    00
	   ]
 00000156  00000004 [		        byte 4 dup(0)
	    00
	   ]
 0000015A  00000004 [		        byte 4 dup(0)
	    00
	   ]

 0000015E 10 59 6F 75 27	s1 byte, "You've selected option ", 0
	   76 65 20 73 65
	   6C 65 63 74 65
	   64 20 6F 70 74
	   69 6F 6E 20 00
 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E	call Randomize

 00000005			start:
				; Display main menu and get user's choice
 00000005  E8 00000000 E	call ClrScr
				INVOKE Menu, maxMenuOption, ADDR mainMenuPrompt, ADDR userChoice, ADDR invalidChoicePrompt
 0000000A  68 000000FE R   *	    push   OFFSET invalidChoicePrompt
 0000000F  68 00000147 R   *	    push   OFFSET userChoice
 00000014  68 00000000 R   *	    push   OFFSET mainMenuPrompt
 00000019  FF 35 00000143 R *	    push   maxMenuOption
 0000001F  E8 00000075	   *	    call   Menu

 00000024			opt1:
				; Play Connect Three
 00000024  83 3D 00000147 R	cmp userChoice, 1
	   01
 0000002B  75 34		jne opt2
				INVOKE GetGameMode, ADDR gameModePrompt, ADDR invalidChoicePrompt, ADDR playerTypes
 0000002D  68 0000014B R   *	    push   OFFSET playerTypes
 00000032  68 000000FE R   *	    push   OFFSET invalidChoicePrompt
 00000037  68 00000051 R   *	    push   OFFSET gameModePrompt
 0000003C  E8 000000D7	   *	    call   GetGameMode
				INVOKE ChooseFirstPlayer, ADDR currentPlayer
 00000041  68 0000014D R   *	    push   OFFSET currentPlayer
 00000046  E8 00000140	   *	    call   ChooseFirstPlayer
 0000004B  E8 00000000 E	call ClrScr
				INVOKE DisplayGrid, ADDR grid
 00000050  68 0000014E R   *	    push   OFFSET grid
 00000055  E8 0000014B	   *	    call   DisplayGrid
 0000005A  E8 00000000 E	call waitMsg
 0000005F  EB A4		jmp start

 00000061			opt2:
				; Show stats
 00000061  83 3D 00000147 R	cmp userChoice, 2
	   02
 00000068  75 28		jne done
 0000006A  BA 0000015E R	mov edx, offset s1
 0000006F  B8 00000003		mov eax, 3
 00000074  E8 00000000 E	call ClrScr
 00000079  E8 00000000 E	call WriteString
 0000007E  E8 00000000 E	call WriteDec
 00000083  E8 00000000 E	call CRLF
 00000088  E8 00000000 E	call WaitMsg
 0000008D  E9 FFFFFF73		jmp start

 00000092			done:
				exit
 00000092  6A 00	   *	    push   +000000000h
 00000094  E8 00000000 E   *	    call   ExitProcess
 00000099			main ENDP

				; -----------------------------------------------------------------------------
 00000099			Menu proc maxOption:dword, prompt:ptr byte, choice:ptr dword, errorMsg:ptr byte
				; Displays the prompt given, gets a selection from the user, checks if the
				; selection is more than or equal to one and less than or equal to maxOption,
				; and stores the result into the memory at choice.
				;
				; Receives:
				; maxOption: The maximum number the user is allowed to select.
				; prompt: A pointer to a string telling the user what they're selecting.
				; choice: A pointer to where this procedure should store the result
				; errorMsg: This string is displayed when the user selects an invalid option
				;
				; Returns:
				; choice: The number of the menu option the user chose.

				LOCAL beginString:dword, period:dword
 00000099  55		   *	    push   ebp
 0000009A  8B EC	   *	    mov    ebp, esp
 0000009C  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 0000009F  C7 45 FC		mov beginString, '>'
	   0000003E
 000000A6  C7 45 FD		mov beginString[1], ' '
	   00000020
 000000AD  C7 45 F8		mov period, '.'
	   0000002E

 000000B4  60			pushad

 000000B5			start:
				; First let's display the menu prompt
 000000B5  8B 55 0C		mov edx, prompt
 000000B8  E8 00000000 E	call WriteString
 000000BD  E8 00000000 E	call CRLF
 000000C2  8D 55 FC		lea edx, beginString
 000000C5  E8 00000000 E	call WriteString

				; Receive the user's option
 000000CA  8B 75 10		mov esi, choice
 000000CD  E8 00000000 E	call ReadHex
 000000D2  89 06		mov [esi], eax

				; Check to see if the input is within the valid range
				; Start over if:
				; The number is below 1
 000000D4  B8 00000001		mov eax, 1
 000000D9  39 06		cmp [esi], eax
 000000DB  72 09		jb tryAgain
				; The number is above the max range
 000000DD  8B 45 08		mov eax, maxOption
 000000E0  39 06		cmp [esi], eax
 000000E2  77 02		ja tryAgain

				; If we're here, then the user successfully entered a menu option. 
				; Yay for them!
 000000E4  EB 2E		jmp done

 000000E6			tryAgain:
				; If we're here, the user's gone and messed up. Let's ask them to try again.
				; First we display the main part of the error message
 000000E6  E8 00000000 E	call ClrScr
 000000EB  8B 55 14		mov edx, errorMsg
 000000EE  E8 00000000 E	call WriteString

				; Then we output the upper limit of correct choices.
 000000F3  8B 45 08		mov eax, maxOption
 000000F6  E8 00000000 E	call WriteDec
 000000FB  8D 55 F8		lea edx, period
 000000FE  E8 00000000 E	call WriteString
 00000103  E8 00000000 E	call CRLF
 00000108  E8 00000000 E	call WaitMsg
 0000010D  E8 00000000 E	call ClrScr

				; And start over
 00000112  EB A1		jmp start

 00000114			done:
 00000114  C9		   *	    leave  
 00000115  C2 0010		ret 16
 00000118			Menu endp

				; -----------------------------------------------------------------------------
 00000118			GetGameMode proc prompt: ptr byte, errorMsg: ptr byte, playerTypesAddr:ptr byte
				; This procedure asks the user to choose a Connect Three game mode.
				; The user will choose either:
				; 1) Human vs. human
				; 2) Human vs. computer
				; 3) Computer vs. computer
				LOCAL maxOptions:dword, choice:dword, choiceAddr: ptr dword
 00000118  55		   *	    push   ebp
 00000119  8B EC	   *	    mov    ebp, esp
 0000011B  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 0000011E  60			pushad

 0000011F  8D 45 F8		lea eax, choice
 00000122  89 45 F4		mov choiceAddr, eax
 00000125  C7 45 F8		mov choice, 0
	   00000000

				; Display game mode menu and get user option
 0000012C  C7 45 FC		mov maxOptions, 3
	   00000003
 00000133  E8 00000000 E	call ClrScr
				INVOKE Menu, maxOptions, prompt, choiceAddr, errorMsg
 00000138  FF 75 0C	   *	    push   dword  ptr ss:[ebp]+00000000Ch
 0000013B  FF 75 F4	   *	    push   dword  ptr ss:[ebp]+0FFFFFFF4h
 0000013E  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000141  FF 75 FC	   *	    push   dword  ptr ss:[ebp]+0FFFFFFFCh
 00000144  E8 FFFFFF50	   *	    call   Menu

 00000149  8B 75 F8		mov esi, choice
 0000014C  8B 06		mov eax, [esi]

				; Now we set up our game with the correct player types
 0000014E			humanVsHuman:
 0000014E  83 F8 01		cmp eax, 1
 00000151  75 10		jne humanVsComputer
 00000153  C7 45 10		mov playerTypesAddr[0], 1   ; One for human
	   00000001
 0000015A  C7 45 11		mov playerTypesAddr[1], 1
	   00000001
 00000161  EB 23		jmp done

 00000163			humanVsComputer:
 00000163  83 F8 02		cmp eax, 2
 00000166  75 10		jne computerVsComputer
 00000168  C7 45 10		mov playerTypesAddr[0], 1
	   00000001
 0000016F  C7 45 11		mov playerTypesAddr[1], 0   ; Zero for computer
	   00000000
 00000176  EB 0E		jmp done

 00000178			computerVsComputer:
 00000178  C7 45 10		mov playerTypesAddr[0], 0
	   00000000
 0000017F  C7 45 11		mov playerTypesAddr[1], 0
	   00000000

 00000186			done:
 00000186  61			popad
 00000187  C9		   *	    leave  
 00000188  C2 000C		ret 12
 0000018B			GetGameMode endp

				; -----------------------------------------------------------------------------
 0000018B			ChooseFirstPlayer proc playerNumber:ptr byte
				; Gets a random number, either 1 or 0, and stores it at the address in
				; playerNumber
				;
				; Receives:
				; playerNumber: The address to store the result
				;
				; Returns:
				; Either a 1 or 0 at the address in playerNumber
 0000018B  55		   *	    push   ebp
 0000018C  8B EC	   *	    mov    ebp, esp
 0000018E  50			push eax
 0000018F  56			push esi
 00000190  B8 00000001		mov eax, 1
 00000195  E8 00000000 E	call RandomRange
 0000019A  8B 75 08		mov esi, playerNumber
 0000019D  88 06		mov byte ptr [esi], al
 0000019F  5E			pop esi
 000001A0  58			pop eax
 000001A1  C9		   *	    leave  
 000001A2  C2 0004		ret 4
 000001A5			ChooseFirstPlayer endp

 000001A5			DisplayGrid proc gridAddr:ptr byte
				LOCAL rowCount:byte
 000001A5  55		   *	    push   ebp
 000001A6  8B EC	   *	    mov    ebp, esp
 000001A8  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000001AB  60			pushad

 000001AC  C6 45 FF 00		mov rowCount, 0
 000001B0  8D 05 0000014E R	lea eax, grid

				; First output top of grid
				; Top left corner
 000001B6  B0 C9		mov al, 201
 000001B8  E8 00000000 E	call WriteChar

				; Middle 
 000001BD  B9 00000007		mov ecx, 7
 000001C2			L1:
 000001C2  51			push ecx
 000001C3  D1 E9		shr ecx, 1
 000001C5  72 09		jc odd
				; ECX is even
 000001C7  B0 D1		mov al, 209
 000001C9  E8 00000000 E	call WriteChar
 000001CE  EB 07		jmp L1done
 000001D0			odd:
				; ECX is odd
 000001D0  B0 CD		mov al, 205
 000001D2  E8 00000000 E	call WriteChar
 000001D7			L1done:
 000001D7  59			pop ecx
 000001D8  E2 E8		loop L1

				; Top right corner
 000001DA  B9 00000007		mov ecx, 7
 000001DF  B0 BB		mov al, 187
 000001E1  E8 00000000 E	call WriteChar
 000001E6  E8 00000000 E	call CRLF

				; Then output middle of grid
 000001EB			start:
 000001EB  B9 00000004		mov ecx, 4
 000001F0  BE 00000000		mov esi, 0

				; Start row
 000001F5  B0 BA		mov al, 186
 000001F7  E8 00000000 E	call WriteChar
 000001FC			L2:
				; TODO: Output colored block depending on contents of matrix here
 000001FC  B0 20		mov al, ' '
 000001FE  E8 00000000 E	call WriteChar

				; If we're at the last column, skip writing last seperator
 00000203  83 F9 01		cmp ecx, 1
 00000206  74 09		je RowEnd

				; If we're not at the last column,
				; Output column seperator
 00000208  B0 B3		mov al, 179
 0000020A  E8 00000000 E	call WriteChar
 0000020F  E2 EB		LOOP L2

 00000211			RowEnd:
				; Print end-of-row character
 00000211  B0 BA		mov al, 186
 00000213  E8 00000000 E	call WriteChar

				; Check if we're on the last row
 00000218  E8 00000000 E	call CRLF
 0000021D  FE 45 FF		inc rowCount
 00000220  80 7D FF 04		cmp rowCount, 4
 00000224  74 37		je printBottom

				; Print row divider
				; Print left side
 00000226  B0 C7		mov al, 199
 00000228  E8 00000000 E	call WriteChar

				; Middle 
 0000022D  B9 00000007		mov ecx, 7
 00000232			L3:
 00000232  51			push ecx
 00000233  D1 E9		shr ecx, 1
 00000235  72 09		jc odd2
				; ECX is even
 00000237  B0 C5		mov al, 197
 00000239  E8 00000000 E	call WriteChar
 0000023E  EB 07		jmp L3done
 00000240			odd2:
				; ECX is odd
 00000240  B0 C4		mov al, 196
 00000242  E8 00000000 E	call WriteChar
 00000247			L3done:
 00000247  59			pop ecx
 00000248  E2 E8		loop L3

				; Print right side
 0000024A  B9 00000007		mov ecx, 7
 0000024F  B0 B6		mov al, 182
 00000251  E8 00000000 E	call WriteChar
 00000256  E8 00000000 E	call CRLF

 0000025B  EB 8E		jmp start

 0000025D			printBottom:
				; Finally, output bottom of grid
				; Bottom left corner
 0000025D  B9 00000007		mov ecx, 7
 00000262  B0 C8		mov al, 200
 00000264  E8 00000000 E	call WriteChar

				; Middle 
 00000269			L4:
 00000269  51			push ecx
 0000026A  D1 E9		shr ecx, 1
 0000026C  72 09		jc odd3
				; ECX is even
 0000026E  B0 CF		mov al, 207
 00000270  E8 00000000 E	call WriteChar
 00000275  EB 07		jmp L4done
 00000277			odd3:
				; ECX is odd
 00000277  B0 CD		mov al, 205
 00000279  E8 00000000 E	call WriteChar
 0000027E			L4done:
 0000027E  59			pop ecx
 0000027F  E2 E8		loop L4

				; Bottom right corner
 00000281  B9 00000007		mov ecx, 7
 00000286  B0 BC		mov al, 188
 00000288  E8 00000000 E	call WriteChar
 0000028D  E8 00000000 E	call CRLF

 00000292  61			popad
 00000293  C9		   *	    leave  
 00000294  C2 0004		RET 4
 00000297			DisplayGrid endp
Final.asm(337) : warning A6004:procedure argument or local not referenced : gridAddr

				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    05/01/18 19:26:52
: Final.as						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000177 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000297 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ChooseFirstPlayer  . . . . . . .	P Near	 0000018B _TEXT	Length= 0000001A Public STDCALL
  playerNumber . . . . . . . . .	DWord	 bp + 00000008
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ConnectThree . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayGrid  . . . . . . . . . .	P Near	 000001A5 _TEXT	Length= 000000F2 Public STDCALL
  gridAddr . . . . . . . . . . .	DWord	 bp + 00000008
  rowCount . . . . . . . . . . .	Byte	 bp - 00000001
  L1 . . . . . . . . . . . . . .	L Near	 000001C2 _TEXT	
  odd  . . . . . . . . . . . . .	L Near	 000001D0 _TEXT	
  L1done . . . . . . . . . . . .	L Near	 000001D7 _TEXT	
  start  . . . . . . . . . . . .	L Near	 000001EB _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000001FC _TEXT	
  RowEnd . . . . . . . . . . . .	L Near	 00000211 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000232 _TEXT	
  odd2 . . . . . . . . . . . . .	L Near	 00000240 _TEXT	
  L3done . . . . . . . . . . . .	L Near	 00000247 _TEXT	
  printBottom  . . . . . . . . .	L Near	 0000025D _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 00000269 _TEXT	
  odd3 . . . . . . . . . . . . .	L Near	 00000277 _TEXT	
  L4done . . . . . . . . . . . .	L Near	 0000027E _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetGameMode  . . . . . . . . . .	P Near	 00000118 _TEXT	Length= 00000073 Public STDCALL
  prompt . . . . . . . . . . . .	DWord	 bp + 00000008
  errorMsg . . . . . . . . . . .	DWord	 bp + 0000000C
  playerTypesAddr  . . . . . . .	DWord	 bp + 00000010
  maxOptions . . . . . . . . . .	DWord	 bp - 00000004
  choice . . . . . . . . . . . .	DWord	 bp - 00000008
  choiceAddr . . . . . . . . . .	DWord	 bp - 0000000C
  humanVsHuman . . . . . . . . .	L Near	 0000014E _TEXT	
  humanVsComputer  . . . . . . .	L Near	 00000163 _TEXT	
  computerVsComputer . . . . . .	L Near	 00000178 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000186 _TEXT	
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Menu . . . . . . . . . . . . . .	P Near	 00000099 _TEXT	Length= 0000007F Public STDCALL
  maxOption  . . . . . . . . . .	DWord	 bp + 00000008
  prompt . . . . . . . . . . . .	DWord	 bp + 0000000C
  choice . . . . . . . . . . . .	DWord	 bp + 00000010
  errorMsg . . . . . . . . . . .	DWord	 bp + 00000014
  beginString  . . . . . . . . .	DWord	 bp - 00000004
  period . . . . . . . . . . . .	DWord	 bp - 00000008
  start  . . . . . . . . . . . .	L Near	 000000B5 _TEXT	
  tryAgain . . . . . . . . . . .	L Near	 000000E6 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000114 _TEXT	
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000099 Public STDCALL
  start  . . . . . . . . . . . .	L Near	 00000005 _TEXT	
  opt1 . . . . . . . . . . . . .	L Near	 00000024 _TEXT	
  opt2 . . . . . . . . . . . . .	L Near	 00000061 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000092 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currentPlayer  . . . . . . . . .	Byte	 0000014D _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameModePrompt . . . . . . . . .	Byte	 00000051 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
gridLength . . . . . . . . . . .	Number	 00000004h   
grid . . . . . . . . . . . . . .	Byte	 0000014E _DATA	
invalidChoicePrompt  . . . . . .	Byte	 000000FE _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mainMenuPrompt . . . . . . . . .	Byte	 00000000 _DATA	
maxMenuOption  . . . . . . . . .	DWord	 00000143 _DATA	
playerTypes  . . . . . . . . . .	Byte	 0000014B _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
s1 . . . . . . . . . . . . . . .	Byte	 0000015E _DATA	
selectColumnPrompt . . . . . . .	Byte	 000000CB _DATA	
userChoice . . . . . . . . . . .	DWord	 00000147 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
