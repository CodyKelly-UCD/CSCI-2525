Microsoft (R) Macro Assembler Version 14.00.24210.0	    03/17/18 15:18:09
inclassMENU.as						     Page 1 - 1


				TITLE inclassMENU.asm
				; Author:  Diane Yoha
				; Date:  7 March 2018
				; Description: This program presents a menu allowing the user to pick a menu option
				;              which then performs a given task.
				; 1.  The user enters a string of less than 50 characters.
				; 2.  The entered string is converted to upper case.
				; 3.  The entered string has all non - letter elements removed.
				; 4.  Is the entered string a palindrome.
				; 5.  Print the string.
				; 6.  Exit
				; ====================================================================================

				Include Irvine32.inc 
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;//Macros
 = mov eax, 0			ClearEAX textequ <mov eax, 0>
 = mov ebx, 0			ClearEBX textequ <mov ebx, 0>
 = mov ecx, 0			ClearECX textequ <mov ecx, 0>
 = mov edx, 0			ClearEDX textequ <mov edx, 0>
 = mov esi, 0			ClearESI textequ <mov esi, 0>
 = mov edi, 0			ClearEDI textequ <mov edi, 0>
 = 00000033			maxLength = 51d

 00000000			.data
 00000000 00			UserOption byte 0h
 00000001  00000033 [		theString byte maxLength dup(0)
	    00
	   ]
 00000034 00			theStringLen byte 0
 00000035 59 6F 75 20 68	errormessage byte 'You have entered an invalid option. Please try again.', 0Ah, 0Dh, 0h
	   61 76 65 20 65
	   6E 74 65 72 65
	   64 20 61 6E 20
	   69 6E 76 61 6C
	   69 64 20 6F 70
	   74 69 6F 6E 2E
	   20 50 6C 65 61
	   73 65 20 74 72
	   79 20 61 67 61
	   69 6E 2E 0A 0D
	   00
 00000000			.code
 00000000			main PROC

 00000000  E8 000000CA		call ClearRegisters          ;// clears registers
 00000005			startHere:
 00000005  E8 000000E4		call DisplayMainMenu
 0000000A  E8 00000000 E	call readhex
 0000000F  A2 00000000 R	mov useroption, al

 00000014  BA 00000001 R	mov edx, offset theString
 00000019  B9 00000033		mov ecx, lengthof theString
 0000001E  BB 00000034 R	mov ebx, offset thestringlen
 00000023			opt1:
 00000023  80 3D 00000000 R	cmp useroption, 1
	   01
 0000002A  75 0C		jne opt2
 0000002C  E8 00000000 E	call clrscr
 00000031  E8 000000F0		call option1
 00000036  EB CD		jmp starthere

 00000038			opt2:
 00000038  80 3D 00000000 R	cmp useroption, 2
	   02
 0000003F  75 0C		jne opt3
 00000041  E8 00000000 E	call clrscr
 00000046  E8 000000F3		call option2
 0000004B  EB B8		jmp starthere
 0000004D			opt3:
 0000004D  80 3D 00000000 R	cmp useroption, 3
	   03
 00000054  75 0C		jne opt4
 00000056  E8 00000000 E	call clrscr
 0000005B  E8 000000FB		call option3
 00000060  EB A3		jmp starthere
 00000062			opt4:
 00000062  80 3D 00000000 R	cmp useroption, 4
	   04
 00000069  75 0C		jne opt5
 0000006B  E8 00000000 E	call clrscr
 00000070  E8 00000127		call option4
 00000075  EB 8E		jmp starthere
 00000077			opt5:
 00000077  80 3D 00000000 R	cmp useroption, 5
	   05
 0000007E  75 0F		jne opt6
 00000080  E8 00000000 E	call clrscr
 00000085  E8 0000016C		call option5
 0000008A  E9 FFFFFF76		jmp starthere
 0000008F			opt6:
 0000008F  80 3D 00000000 R	cmp useroption, 6
	   06
 00000096  75 0F		jne opt7
 00000098  E8 00000000 E	call clrscr
 0000009D  E8 00000172		call option6
 000000A2  E9 FFFFFF5E		jmp starthere
 000000A7			opt7:
 000000A7  80 3D 00000000 R	cmp useroption, 7
	   07
 000000AE  75 02		jne oops
 000000B0  EB 16		jmp quitit
 000000B2			oops:
 000000B2  52			push edx
 000000B3  BA 00000035 R	mov edx, offset errormessage
 000000B8  E8 00000000 E	call writestring
 000000BD  E8 00000000 E	call waitmsg
 000000C2  5A			pop edx
 000000C3  E9 FFFFFF3D		jmp starthere

 000000C8			quitit:
				exit
 000000C8  6A 00	   *	    push   +000000000h
 000000CA  E8 00000000 E   *	    call   ExitProcess
 000000CF			main ENDP
				;// Procedures
				;// ===============================================================
 000000CF			ClearRegisters Proc
				;// Description:  Clears the registers EAX, EBX, ECX, EDX, ESI, EDI
				;// Requires:  Nothing
				;// Returns:  Nothing, but all registers will be cleared.

 000000CF  B8 00000000		cleareax
 000000D4  BB 00000000		clearebx
 000000D9  B9 00000000		clearecx
 000000DE  BA 00000000		clearedx
 000000E3  BE 00000000		clearesi
 000000E8  BF 00000000		clearedi

 000000ED  C3			ret
 000000EE			ClearRegisters ENDP

 000000EE			DisplayMainMenu proc
				;// Description:  Displays the main menu
				;// Requires:  Nothing
				;// Returns:  Nothing

 0000006D			.data
 0000006D 4D 41 49 4E 20	Menuprompt1 byte 'MAIN MENU', 0Ah, 0Dh,
	   4D 45 4E 55 0A
	   0D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 0A 0D 31 2E
	   20 45 6E 74 65
	   72 20 61 20 53
	   74 72 69 6E 67
	   0A 0D 32 2E 20
	   43 6F 6E 76 65
	   72 74 20 61 6C
	   6C 20 65 6C 65
	   6D 65 6E 74 73
	   20 74 6F 20 6C
	   6F 77 65 72 20
	   63 61 73 65 0A
	   0D 33 2E 20 52
	   65 6D 6F 76 65
	   20 61 6C 6C 20
	   6E 6F 6E 2D 6C
	   65 74 74 65 72
	   20 65 6C 65 6D
	   65 6E 74 73 0A
	   0D 34 2E 20 44
	   65 74 65 72 6D
	   69 6E 65 20 69
	   66 20 74 68 65
	   20 73 74 72 69
	   6E 67 20 69 73
	   20 61 20 70 61
	   6C 69 6E 64 72
	   6F 6D 65 20 28
	   4E 4F 54 20 63
	   61 73 65 20 73
	   65 6E 73 69 74
	   69 76 65 29 0A
	   0D 35 2E 20 44
	   69 73 70 6C 61
	   79 20 74 68 65
	   20 73 74 72 69
	   6E 67 0A 0D 36
	   2E 20 00
				'==========', 0Ah, 0Dh,
				'1. Enter a String', 0Ah, 0Dh,
				'2. Convert all elements to lower case',0Ah, 0Dh,
				'3. Remove all non-letter elements',0Ah, 0Dh,
				'4. Determine if the string is a palindrome (NOT case sensitive)',0Ah, 0Dh,
				'5. Display the string',0Ah, 0Dh,
				'6. ', 0
 0000013D 45 58 54 52 41	Menuprompt2 byte 'EXTRA CREDIT', 0
	   20 43 52 45 44
	   49 54 00
 0000014A 3A 20 44 65 74	Menuprompt3 byte ': Determine if the string is a palindrome (case sensitive)', 0Ah, 0Dh,
	   65 72 6D 69 6E
	   65 20 69 66 20
	   74 68 65 20 73
	   74 72 69 6E 67
	   20 69 73 20 61
	   20 70 61 6C 69
	   6E 64 72 6F 6D
	   65 20 28 63 61
	   73 65 20 73 65
	   6E 73 69 74 69
	   76 65 29 0A 0D
	   37 2E 20 45 78
	   69 74 3A 20 0A
	   0D 00
				'7. Exit: ',0Ah, 0Dh, 0h

 000000EE			.code
				; Clear screen
 000000EE  E8 00000000 E	call clrscr

				; Display first part of main menu
 000000F3  BA 0000006D R	mov edx, offset menuprompt1
 000000F8  E8 00000000 E	call WriteString

				; Display the words EXTRA CREDIT in gold
 000000FD  B8 0000000E		mov eax, 14
 00000102  BA 0000013D R	mov edx, offset menuprompt2
 00000107  E8 00000000 E	call SetTextColor
 0000010C  E8 00000000 E	call WriteString

				; Reset text color and display the rest of the menu
 00000111  B8 00000007		mov eax, 7
 00000116  BA 0000014A R	mov edx, offset menuprompt3
 0000011B  E8 00000000 E	call settextcolor
 00000120  E8 00000000 E	call writestring
 00000125  C3			ret
 00000126			DisplayMainMenu endp

 00000126			option1 proc uses edx ecx
				; Description:  Receives a string from the user
				;
				; Receives:
				; EDX: The offset of the byte array to store the string in.
				;      Must have 50 elements.
				;
				; Returns: 
				; EDX: string from user
				; EBX: length of string
				;
				; Requires:
				; Array must have 50 elements

 00000126  52		   *	    push   edx
 00000127  51		   *	    push   ecx
 00000192			.data
 00000192 50 6C 65 61 73	option1prompt byte 'Please enter a string of characters (50 or less): ', 0Ah, 0Dh, '--->', 0h
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 74 72 69 6E
	   67 20 6F 66 20
	   63 68 61 72 61
	   63 74 65 72 73
	   20 28 35 30 20
	   6F 72 20 6C 65
	   73 73 29 3A 20
	   0A 0D 2D 2D 2D
	   3E 00

 00000128			.code
 00000128  52			push edx       ; saving the address of the string
 00000129  BA 00000192 R	mov edx, offset option1prompt
 0000012E  E8 00000000 E	call writestring
 00000133  5A			pop edx

				; add procedure to clear string (loop through and place zeros)

 00000134  E8 00000000 E	call readstring
 00000139  88 03		mov byte ptr [ebx], al     ;//length of user entered string, now in thestringlen

				ret
 0000013B  59		   *	    pop    ecx
 0000013C  5A		   *	    pop    edx
 0000013D  C3		   *	    ret    00000h
 0000013E			option1 endp

 0000013E			option2 proc uses edx ebx
				; Description:  Converts all uppercase letters in string to lowercase
				;
				; Receives:
				; EDX: Offset of string array
				; ECX: Length of string array
				;
				; Returns:  
				; EDX: String array with converted letters, if any

 0000013E  52		   *	    push   edx
 0000013F  53		   *	    push   ebx
 00000140  BE 00000000		clearESI
 00000145			L2:
 00000145  8A 04 16		mov al, byte ptr [edx+esi]
 00000148  3C 41		cmp al, 41h
 0000014A  72 09		jb keepgoing
 0000014C  3C 5A		cmp al, 5ah
 0000014E  77 05		ja keepgoing
 00000150  0C 20		or al, 20h     ;//could use add al, 20h
 00000152  88 04 16		mov byte ptr [edx+esi], al
 00000155			keepgoing:
 00000155  46			inc esi
 00000156  E2 ED		loop L2
				ret
 00000158  5B		   *	    pop    ebx
 00000159  5A		   *	    pop    edx
 0000015A  C3		   *	    ret    00000h
 0000015B			option2 endp

 0000015B			option3 proc
				; Description:  Removes all non-letter characters from string
				;
				; Receives:
				; EDX:  offset of string array
				;
				; Returns:  
				; EDX: offset of string array
				; EBX: new length of string
 0000015B  50			push eax
 0000015C  56			push esi
 0000015D  52			push edx
 0000015E  53			push ebx
 0000015F  BE 00000000		clearESI
 00000164  B8 00000000		clearEAX

 00000169			L1:
				; Move current element into al
 00000169  8A 04 16		mov al, byte ptr [edx + esi]

				; Test if current element is NOT a capital letter
 0000016C  3C 41		cmp al, 41h
 0000016E  72 1E		jb notLetter
 00000170  3C 5B		cmp al, 5bh
 00000172  72 0C		jb letter

				; If the element isn't a capital letter, it may be a lowercase letter
 00000174  3C 61		cmp al, 61h
 00000176  72 16		jb notLetter
 00000178  3C 7B		cmp al, 7bh
 0000017A  72 04		jb letter
 0000017C  3C 75		cmp al, 75h
 0000017E  77 0E		ja notletter

 00000180			letter:
				; If current element IS letter:
				; Move element into element at ah
 00000180  0F B6 DC		movzx ebx, ah
				; Make current element 0
 00000183  C6 04 16 00		mov byte ptr [edx + esi], 0
				; Move letter into new position
 00000187  88 04 13		mov byte ptr [edx + ebx], al
				; Increment ah so we get a new valid position
 0000018A  FE C4		inc ah
 0000018C  EB 04		jmp keepgoing

 0000018E			notLetter:
				; If current element is NOT a letter:
				; Make current element 0
 0000018E  C6 04 16 00		mov byte ptr [edx + esi], 0

 00000192			keepgoing:
 00000192  46			inc esi
 00000193  E2 D4		LOOP L1

 00000195			complete:
 00000195  5B			pop ebx
 00000196  88 23		mov byte ptr [ebx], ah  ; Return length of string
 00000198  5A			pop edx
 00000199  5E			pop esi
 0000019A  58			pop eax
 0000019B  C3			ret
 0000019C			option3 endp

 0000019C			option4 proc
				; Description:  Checks if a given string is a palindrome.
				; To be a palindrome, the given string must read the same forwards as it
				; does backwards. This means that a character at index n must be the same
				; as the character at index (length of string - 1) - n, where n is less than or
				; equal to (length of string) / 2.
				;
				; Receives:  
				; EDX: Offset of string array
				; EBX: Number of characters in string
				;
				; Returns:  
				;
				; Requires:  

 000001CB			.data 
 000001CB 20 69 73 20 61	palMsg byte " is a palindrome.",0
	   20 70 61 6C 69
	   6E 64 72 6F 6D
	   65 2E 00
 000001DD 20 69 73 20 6E	notPalMsg byte " is not a palindrome.",0
	   6F 74 20 61 20
	   70 61 6C 69 6E
	   64 72 6F 6D 65
	   2E 00
 0000019C			.code
 0000019C  53			push ebx
 0000019D  56			push esi
 0000019E  50			push eax
				; ESI will hold the first index to compare
 0000019F  BE 00000000		mov esi, 0
				; EBX will hold the second
 000001A4  0F B6 1B		movzx ebx, byte ptr [ebx]
 000001A7  4B			dec ebx

				; We're going to loop through as many elements as there
				; are in the string, 
 000001A8  51			push ecx
 000001A9  8B CB		mov ecx, ebx

				; Loop through the string, comparing elements at front and back
 000001AB			L1:
 000001AB  8A 04 16		mov al, byte ptr [edx + esi]
 000001AE  3A 04 13		cmp al, byte ptr [edx + ebx]
 000001B1  75 24		jne notPalindrome
 000001B3  46			inc esi
 000001B4  4B			dec ebx
 000001B5  3B F3		cmp esi, ebx
 000001B7  73 02		jae palindrome ; If esi (first index) is greater than or equal to 
				               ; ebx (second index), we're done.
 000001B9  E2 F0		LOOP L1

 000001BB			palindrome:
				; Write results to screen
 000001BB  E8 00000000 E	call WriteString
 000001C0  52			push edx
 000001C1  BA 000001CB R	mov edx, offset palMsg
 000001C6  E8 00000000 E	call WriteString
 000001CB  E8 00000000 E	call crlf
 000001D0  E8 00000000 E	call waitmsg
 000001D5  EB 19		jmp complete

 000001D7			notPalindrome:
 000001D7  E8 00000000 E	call WriteString
 000001DC  BA 000001DD R	mov edx, offset notPalMsg
 000001E1  E8 00000000 E	call WriteString
 000001E6  E8 00000000 E	call crlf
 000001EB  E8 00000000 E	call waitmsg

 000001F0			complete:
 000001F0  5A			pop edx
 000001F1  59			pop ecx
 000001F2  58			pop eax
 000001F3  5E			pop esi
 000001F4  5B			pop ebx
 000001F5  C3			ret
 000001F6			option4 endp

 000001F6			option5 proc uses edx 
 000001F6  52		   *	    push   edx
 000001F3			.data
 000001F3 54 68 65 20 53	option5prompt byte 'The String is: ', 0h
	   74 72 69 6E 67
	   20 69 73 3A 20
	   00
 000001F7			.code
 000001F7  52			push edx
 000001F8  BA 000001F3 R	mov edx, offset option5prompt
 000001FD  E8 00000000 E	call writestring
 00000202  5A			pop edx
 00000203  E8 00000000 E	call writestring
 00000208  E8 00000000 E	call crlf
 0000020D  E8 00000000 E	call waitmsg
				ret
 00000212  5A		   *	    pop    edx
 00000213  C3		   *	    ret    00000h
 00000214			option5 endp

 00000214			option6 proc
 00000203			.data 
 00000203 20 69 73 20 61	palMsg2 byte " is a palindrome.",0
	   20 70 61 6C 69
	   6E 64 72 6F 6D
	   65 2E 00
 00000215 20 69 73 20 6E	notPalMsg2 byte " is not a palindrome.",0
	   6F 74 20 61 20
	   70 61 6C 69 6E
	   64 72 6F 6D 65
	   2E 00
 00000214			.code
 00000214  53			push ebx
 00000215  56			push esi
 00000216  50			push eax
				; ESI will hold the first index to compare
 00000217  BE 00000000		mov esi, 0
				; EBX will hold the second
 0000021C  0F B6 1B		movzx ebx, byte ptr [ebx]
 0000021F  4B			dec ebx

				; We're going to loop through as many elements as there
				; are in the string, 
 00000220  51			push ecx
 00000221  8B CB		mov ecx, ebx

				; Loop through the string, comparing elements at front and back
 00000223			L1:
 00000223  8A 04 16		mov al, byte ptr [edx + esi]
 00000226  3A 04 13		cmp al, byte ptr [edx + ebx]
 00000229  75 21		jne notPalindrome
 0000022B  46			inc esi
 0000022C  4B			dec ebx
 0000022D  E2 F4		LOOP L1

 0000022F  59			pop ecx

				; Write results to screen
 00000230  E8 00000000 E	call WriteString
 00000235  52			push edx
 00000236  BA 000001CB R	mov edx, offset palMsg
 0000023B  E8 00000000 E	call WriteString
 00000240  E8 00000000 E	call crlf
 00000245  E8 00000000 E	call waitmsg
 0000024A  EB 19		jmp complete

 0000024C			notPalindrome:
 0000024C  E8 00000000 E	call WriteString
 00000251  BA 000001DD R	mov edx, offset notPalMsg
 00000256  E8 00000000 E	call WriteString
 0000025B  E8 00000000 E	call crlf
 00000260  E8 00000000 E	call waitmsg


 00000265			complete:
 00000265  5A			pop edx
 00000266  58			pop eax
 00000267  5E			pop esi
 00000268  5B			pop ebx
 00000269  C3			ret
 0000026A			option6 endp

				END main

Microsoft (R) Macro Assembler Version 14.00.24210.0	    03/17/18 15:18:09
inclassMENU.as						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000022B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000026A Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ClearRegisters . . . . . . . . .	P Near	 000000CF _TEXT	Length= 0000001F Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayMainMenu  . . . . . . . .	P Near	 000000EE _TEXT	Length= 00000038 Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000CF Public STDCALL
  startHere  . . . . . . . . . .	L Near	 00000005 _TEXT	
  opt1 . . . . . . . . . . . . .	L Near	 00000023 _TEXT	
  opt2 . . . . . . . . . . . . .	L Near	 00000038 _TEXT	
  opt3 . . . . . . . . . . . . .	L Near	 0000004D _TEXT	
  opt4 . . . . . . . . . . . . .	L Near	 00000062 _TEXT	
  opt5 . . . . . . . . . . . . .	L Near	 00000077 _TEXT	
  opt6 . . . . . . . . . . . . .	L Near	 0000008F _TEXT	
  opt7 . . . . . . . . . . . . .	L Near	 000000A7 _TEXT	
  oops . . . . . . . . . . . . .	L Near	 000000B2 _TEXT	
  quitit . . . . . . . . . . . .	L Near	 000000C8 _TEXT	
option1  . . . . . . . . . . . .	P Near	 00000126 _TEXT	Length= 00000018 Public STDCALL
option2  . . . . . . . . . . . .	P Near	 0000013E _TEXT	Length= 0000001D Public STDCALL
  L2 . . . . . . . . . . . . . .	L Near	 00000145 _TEXT	
  keepgoing  . . . . . . . . . .	L Near	 00000155 _TEXT	
option3  . . . . . . . . . . . .	P Near	 0000015B _TEXT	Length= 00000041 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000169 _TEXT	
  letter . . . . . . . . . . . .	L Near	 00000180 _TEXT	
  notLetter  . . . . . . . . . .	L Near	 0000018E _TEXT	
  keepgoing  . . . . . . . . . .	L Near	 00000192 _TEXT	
  complete . . . . . . . . . . .	L Near	 00000195 _TEXT	
option4  . . . . . . . . . . . .	P Near	 0000019C _TEXT	Length= 0000005A Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000001AB _TEXT	
  palindrome . . . . . . . . . .	L Near	 000001BB _TEXT	
  notPalindrome  . . . . . . . .	L Near	 000001D7 _TEXT	
  complete . . . . . . . . . . .	L Near	 000001F0 _TEXT	
option5  . . . . . . . . . . . .	P Near	 000001F6 _TEXT	Length= 0000001E Public STDCALL
option6  . . . . . . . . . . . .	P Near	 00000214 _TEXT	Length= 00000056 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000223 _TEXT	
  notPalindrome  . . . . . . . .	L Near	 0000024C _TEXT	
  complete . . . . . . . . . . .	L Near	 00000265 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
ClearEAX . . . . . . . . . . . .	Text   	 mov eax, 0
ClearEBX . . . . . . . . . . . .	Text   	 mov ebx, 0
ClearECX . . . . . . . . . . . .	Text   	 mov ecx, 0
ClearEDI . . . . . . . . . . . .	Text   	 mov edi, 0
ClearEDX . . . . . . . . . . . .	Text   	 mov edx, 0
ClearESI . . . . . . . . . . . .	Text   	 mov esi, 0
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
Menuprompt1  . . . . . . . . . .	Byte	 0000006D _DATA	
Menuprompt2  . . . . . . . . . .	Byte	 0000013D _DATA	
Menuprompt3  . . . . . . . . . .	Byte	 0000014A _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UserOption . . . . . . . . . . .	Byte	 00000000 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errormessage . . . . . . . . . .	Byte	 00000035 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxLength  . . . . . . . . . . .	Number	 00000033h   
notPalMsg2 . . . . . . . . . . .	Byte	 00000215 _DATA	
notPalMsg  . . . . . . . . . . .	Byte	 000001DD _DATA	
option1prompt  . . . . . . . . .	Byte	 00000192 _DATA	
option5prompt  . . . . . . . . .	Byte	 000001F3 _DATA	
palMsg2  . . . . . . . . . . . .	Byte	 00000203 _DATA	
palMsg . . . . . . . . . . . . .	Byte	 000001CB _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
theStringLen . . . . . . . . . .	Byte	 00000034 _DATA	
theString  . . . . . . . . . . .	Byte	 00000001 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
